import { useState } from "react";
import { FileUpload } from "@/components/FileUpload";
import { PromptInput } from "@/components/PromptInput";
import { SummaryDisplay } from "@/components/SummaryDisplay";
import { EmailShare } from "@/components/EmailShare";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Brain, FileText, Sparkles, Mail, ArrowRight } from "lucide-react";
import emailjs from '@emailjs/browser';

// NOTE: This component uses a mock implementation for local development.
// The actual AI summary generation requires the Supabase Edge Function to be deployed
// and GEMINI_API_KEY to be configured.

// Configuration - Set your API key here for local testing
const GEMINI_API_KEY = "AIzaSyDnVk3pUZiKlrGOJYdhWW31nG8BBi8svmw"; // Remove this before committing to Git!

// EmailJS Configuration - Get these from emailjs.com
const EMAILJS_SERVICE_ID = "YOUR_SERVICE_ID"; // Replace with your EmailJS service ID
const EMAILJS_TEMPLATE_ID = "YOUR_TEMPLATE_ID"; // Replace with your EmailJS template ID
const EMAILJS_PUBLIC_KEY = "YOUR_PUBLIC_KEY"; // Replace with your EmailJS public key

type AppState = "upload" | "summary" | "share";

const Index = () => {
  const [currentState, setCurrentState] = useState<AppState>("upload");
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [transcriptContent, setTranscriptContent] = useState("");
  const [prompt, setPrompt] = useState("");
  const [summary, setSummary] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSharing, setIsSharing] = useState(false);
  const [useMockEmail, setUseMockEmail] = useState(true); // Toggle for mock email

  const handleFileUpload = (file: File, content: string) => {
    console.log('Index: File uploaded:', file.name, 'Content length:', content.length);
    setUploadedFile(file);
    setTranscriptContent(content);
  };

  const handleRemoveFile = () => {
    setUploadedFile(null);
    setTranscriptContent("");
  };

  const handleGenerateSummary = async () => {
    if (!transcriptContent || !prompt) return;
    
    setIsGenerating(true);
    try {
      // If API key is configured, use real Gemini API
      if (GEMINI_API_KEY && GEMINI_API_KEY.trim()) {
        console.log('Using real Gemini API');
        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${GEMINI_API_KEY}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            contents: [{
              parts: [{
                text: `${prompt}\n\nTranscript to summarize:\n${transcriptContent}`
              }]
            }],
            generationConfig: {
              temperature: 0.7,
              topK: 1,
              topP: 1,
              maxOutputTokens: 2048,
            },
          }),
        });

        if (!response.ok) {
          throw new Error(`Gemini API error: ${response.status}`);
        }

        const data = await response.json();
        const summary = data.candidates?.[0]?.content?.parts?.[0]?.text;

        if (!summary) {
          throw new Error('No summary generated by Gemini API');
        }

        setSummary(summary);
        setCurrentState("summary");
        return;
      }

      // Fallback to mock implementation if no API key configured
      console.log('Using mock implementation (no API key configured)');
      await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API delay
      
      const mockSummary = `ðŸ“‹ **Meeting Summary Generated**

**Prompt Used:** ${prompt}

**Key Points:**
â€¢ Meeting transcript successfully processed
â€¢ AI analysis completed
â€¢ Summary generated based on your custom prompt

**Note:** This is a mock summary for development testing. To use real AI, configure GEMINI_API_KEY in the code.

**Transcript Length:** ${transcriptContent.length} characters
**Prompt:** ${prompt}

To get real AI-generated summaries, set your Gemini API key in the GEMINI_API_KEY constant at the top of this file.`;

      setSummary(mockSummary);
      setCurrentState("summary");
    } catch (error) {
      console.error("Error generating summary:", error);
      setSummary(`Sorry, there was an error generating the summary: ${error.message}. Please try again or check your API configuration.`);
      setCurrentState("summary");
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSummaryEdit = (newSummary: string) => {
    setSummary(newSummary);
  };

  const handleShare = () => {
    setCurrentState("share");
  };

  const handleEmailSend = async (emails: string[], subject: string, message: string) => {
    setIsSharing(true);
    try {
      // Check if EmailJS is configured
      if (EMAILJS_SERVICE_ID === "YOUR_SERVICE_ID" || 
          EMAILJS_TEMPLATE_ID === "YOUR_TEMPLATE_ID" || 
          EMAILJS_PUBLIC_KEY === "YOUR_PUBLIC_KEY") {
        
        // If EmailJS not configured, use mock email
        if (useMockEmail) {
          console.log("Using mock email (EmailJS not configured)");
          await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate email sending
          
          // Success - reset form and go back to upload
          setIsSharing(false);
          setCurrentState("upload");
          setUploadedFile(null);
          setTranscriptContent("");
          setPrompt("");
          setSummary("");
          return;
        } else {
          throw new Error("EmailJS not configured. Please set up your EmailJS credentials.");
        }
      }

      // Send email using EmailJS
      const emailPromises = emails.map(email => {
        const templateParams = {
          to_email: email,
          subject: subject,
          message: message,
          summary: summary,
          from_name: "AI Meeting Summarizer",
          reply_to: "noreply@meetingsummarizer.com"
        };

        return emailjs.send(
          EMAILJS_SERVICE_ID,
          EMAILJS_TEMPLATE_ID,
          templateParams,
          EMAILJS_PUBLIC_KEY
        );
      });

      // Wait for all emails to be sent
      await Promise.all(emailPromises);

      // Success - reset form and go back to upload
      setIsSharing(false);
      setCurrentState("upload");
      setUploadedFile(null);
      setTranscriptContent("");
      setPrompt("");
      setSummary("");
      
    } catch (error) {
      console.error("Error sending email:", error);
      setIsSharing(false);
      
      // If EmailJS fails, fall back to mock for demo purposes
      if (error.message.includes("EmailJS not configured")) {
        // Show error message
        alert("EmailJS not configured. Please set up your EmailJS credentials to send real emails.");
      } else {
        // Show generic error
        alert("Failed to send email. Please try again or check your EmailJS configuration.");
      }
    }
  };

  const handleBackToSummary = () => {
    setCurrentState("summary");
  };

  const getStepNumber = (step: AppState) => {
    switch (step) {
      case "upload": return 1;
      case "summary": return 2;
      case "share": return 3;
    }
  };

  const isStepActive = (step: AppState) => currentState === step;
  const isStepCompleted = (step: AppState) => {
    switch (step) {
      case "upload": return !!uploadedFile && !!prompt;
      case "summary": return !!summary;
      case "share": return false;
    }
  };

  if (currentState === "share") {
    return (
      <div className="min-h-screen bg-gradient-secondary py-8 px-4">
        <div className="max-w-6xl mx-auto">
          <EmailShare
            summary={summary}
            onSend={handleEmailSend}
            onBack={handleBackToSummary}
            isLoading={isSharing}
            useMockEmail={useMockEmail}
            onToggleMockEmail={setUseMockEmail}
          />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-secondary">
      {/* Header */}
      <div className="bg-background/80 backdrop-blur-sm border-b sticky top-0 z-10">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-gradient-primary rounded-lg">
                <Brain className="h-6 w-6 text-primary-foreground" />
              </div>
              <div>
                <h1 className="text-2xl font-bold">AI Meeting Summarizer</h1>
                <p className="text-sm text-muted-foreground">
                  Transform your meeting transcripts into actionable summaries
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Progress Steps */}
      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="flex items-center justify-center mb-8">
          {(["upload", "summary", "share"] as AppState[]).map((step, index) => {
            const stepNumber = getStepNumber(step);
            const isActive = isStepActive(step);
            const isCompleted = isStepCompleted(step);
            const stepLabels = { upload: "Upload & Prompt", summary: "Review Summary", share: "Share" };
            
            return (
              <div key={step} className="flex items-center">
                <div className="flex flex-col items-center">
                  <div
                    className={`w-10 h-10 rounded-full flex items-center justify-center border-2 transition-all duration-300 ${
                      isActive
                        ? "bg-primary border-primary text-primary-foreground"
                        : isCompleted
                        ? "bg-primary/10 border-primary text-primary"
                        : "bg-muted border-muted-foreground/30 text-muted-foreground"
                    }`}
                  >
                    {isCompleted && !isActive ? (
                      <Sparkles className="h-4 w-4" />
                    ) : (
                      stepNumber
                    )}
                  </div>
                  <span className={`text-xs mt-2 font-medium ${
                    isActive ? "text-primary" : "text-muted-foreground"
                  }`}>
                    {stepLabels[step]}
                  </span>
                </div>
                {index < 2 && (
                  <div className={`w-16 h-0.5 mx-4 transition-colors duration-300 ${
                    isCompleted ? "bg-primary" : "bg-muted"
                  }`} />
                )}
              </div>
            );
          })}
        </div>

        {/* Content */}
        <div className="space-y-8">
          {currentState === "upload" && (
            <>
              <FileUpload
                onFileUpload={handleFileUpload}
                uploadedFile={uploadedFile}
                onRemoveFile={handleRemoveFile}
              />
              
              {uploadedFile && (
                <PromptInput
                  prompt={prompt}
                  onPromptChange={setPrompt}
                  onGenerate={handleGenerateSummary}
                  isGenerating={isGenerating}
                  disabled={!uploadedFile}
                />
              )}
            </>
          )}

          {currentState === "summary" && summary && (
            <SummaryDisplay
              summary={summary}
              onSummaryEdit={handleSummaryEdit}
              onShare={handleShare}
              isSharing={isSharing}
            />
          )}
        </div>

        {/* Features Section */}
        {currentState === "upload" && !uploadedFile && (
          <div className="mt-16">
            <h2 className="text-2xl font-bold text-center mb-8">
              How It Works
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card className="p-6 text-center hover:shadow-card transition-all duration-300">
                <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4">
                  <FileText className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-lg font-semibold mb-2">Upload Transcript</h3>
                <p className="text-muted-foreground text-sm">
                  Upload your meeting transcript as a .txt file or paste it directly
                </p>
              </Card>
              
              <Card className="p-6 text-center hover:shadow-card transition-all duration-300">
                <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4">
                  <Sparkles className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-lg font-semibold mb-2">AI Processing</h3>
                <p className="text-muted-foreground text-sm">
                  Our AI analyzes your transcript and creates a structured summary using Google's Gemini AI.
                </p>
              </Card>
              
              <Card className="p-6 text-center hover:shadow-card transition-all duration-300">
                <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4">
                  <Mail className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-lg font-semibold mb-2">Share & Export</h3>
                <p className="text-muted-foreground text-sm">
                  Edit, customize, and share your summary via email instantly. Configure EmailJS for real email sending.
                </p>
              </Card>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Index;